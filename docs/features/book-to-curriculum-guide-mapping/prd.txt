# Learn Like Magic – Curriculum Reference & Book Ingestion Requirements (Updated)

## 1. Overview

The goal of this feature is to enable the Learn Like Magic platform to build a structured and curriculum-aligned reference system that the AI Tutor can use as a teaching baseline. This system allows the platform to understand what topics, subtopics, and teaching depth are expected for each grade, subject, and education board, serving as a foundation for generating and delivering personalized lessons.

The overall setup has two key components:
1. **Book Ingestion & Curriculum Reference Builder**
2. **AI Tutor Reference Retrieval & Guideline Usage**

This document defines the requirements for the first component: scanning, processing, and organizing educational books into structured, human-verified teaching guidelines.

---

## 2. Objectives

- To convert physical or digital textbooks into a structured, searchable, and reviewable reference dataset.
- To ensure AI-generated educational content is aligned with real-world curriculum standards.
- To provide flexibility in merging and aggregating content from multiple books across boards, grades, and subjects.
- To ensure all derived content is original, synthesized, and compliant with copyright rules.

---

## 3. Roles & Actors

1. **Admin / Content Curator**
   - Uploads new textbooks (as image pages or PDFs).
   - Reviews OCR outputs before final approval.
   - Reviews and validates automatically generated teaching guidelines.
   - Can approve, edit, or retry guideline generation with modified parameters.

2. **System / AI Pipeline**
   - Converts images into text using OpenAI Vision APIs.
   - Stores text and metadata in cloud storage (AWS S3).
   - Processes all book content to infer topics, subtopics, and learning guidelines using an orchestrated AI pipeline (e.g., LangGraph).
   - Generates JSON-based guideline summaries at book and merged levels.

3. **AI Tutor Agent**
   - References these generated guidelines as context while teaching or generating new educational content.

---

## 4. Core Functional Requirements

### 4.1 Book Upload & Management
- Admins can upload scanned book pages as image files.
- System converts each page to text using Vision APIs.
- Each page is reviewed by the admin for correctness before being saved permanently.
- Every book will have a unique `book_id`, which links to its associated metadata and pages.
- Admin can create multiple versions of the same book (e.g., new editions or revised scans).
- Each version is tracked with its metadata, creation date, and approval status.

### 4.2 Storage Structure
The system will use a combination of **AWS S3** and a **relational database** to manage books, pages, and guidelines.

#### S3 Layout
**S3 Bucket Name:** `learnlikemagic-books` (shared across all environments)

The S3 layout will be organized as follows:
```
s3://learnlikemagic-books/books/{book_id}/
  metadata.json
  cover.png
  1.png
  1.txt
  2.png
  2.txt
  ...
  guideline.json
```
- The `metadata.json` file will contain an **ordered list of pages** (e.g., `1.png`, `2.png`, `3.png`) representing the correct reading order and page approval status.
- Each page will have a corresponding `.txt` file generated from OCR (e.g., `1.txt` for `1.png`).
- The `cover.png` stores the book cover image, which can be processed to extract metadata.
- The `guideline.json` file represents the AI-generated guideline for that book, which can be reviewed and updated by the admin.

#### Relational Database
The database will store book metadata and track the workflow state. **No separate `book_pages` table is needed** - page information is stored in S3's `metadata.json`.

**Table: books**
- `id` (VARCHAR, PRIMARY KEY) - Unique book identifier
- `title` (VARCHAR) - Book title
- `author` (VARCHAR) - Book author
- `edition` (VARCHAR) - Edition information
- `edition_year` (INTEGER) - Year of publication
- `country` (VARCHAR) - Country (e.g., "India")
- `board` (VARCHAR) - Education board (e.g., "CBSE")
- `grade` (INTEGER) - Grade level (e.g., 3)
- `subject` (VARCHAR) - Subject (e.g., "Mathematics")
- `cover_image_s3_key` (VARCHAR) - S3 key for cover image
- `s3_prefix` (VARCHAR) - S3 folder prefix (e.g., `books/{book_id}/`)
- `status` (VARCHAR) - Workflow state (see Section 4.2.1)
- `metadata_s3_key` (VARCHAR) - S3 key for metadata.json
- `created_at` (TIMESTAMP)
- `updated_at` (TIMESTAMP)
- `created_by` (VARCHAR) - Admin username
- INDEX: `idx_books_curriculum` on (country, board, grade, subject)

**Table: book_guidelines**
- `id` (VARCHAR, PRIMARY KEY) - Guideline identifier
- `book_id` (VARCHAR, FOREIGN KEY → books.id)
- `guideline_s3_key` (VARCHAR) - S3 key for guideline.json
- `status` (VARCHAR) - draft, pending_review, approved, rejected
- `generated_at` (TIMESTAMP) - When guideline was generated
- `reviewed_at` (TIMESTAMP) - When admin reviewed
- `reviewed_by` (VARCHAR) - Admin username
- `version` (INTEGER) - Version number for tracking regenerations
- INDEX: `idx_book_guidelines_book` on (book_id)

**Table: teaching_guidelines (existing, modified)**
- **NEW COLUMN:** `book_id` (VARCHAR, FOREIGN KEY → books.id) - Tracks which book this guideline came from
- **NEW COLUMN:** `source_pages` (VARCHAR) - JSON array of page numbers (e.g., "[15, 16, 17]")
- Existing columns: id, country, board, grade, subject, topic, subtopic, guideline, metadata_json, created_at

**Key Design Decision:** Teaching guidelines maintain **subtopic-level granularity**. When a book's guideline.json is approved, the system automatically creates **multiple rows** in the `teaching_guidelines` table - one for each subtopic extracted from the book.

#### 4.2.1 Book Status State Machine
Books progress through the following states:

1. **draft** - Book created, no pages uploaded
2. **uploading_pages** - Pages are being added one-by-one
3. **pages_complete** - All pages uploaded and approved, ready for guideline generation
4. **generating_guidelines** - LangGraph pipeline is actively processing the book
5. **guidelines_pending_review** - guideline.json generated, awaiting admin approval
6. **approved** - Guideline approved and populated into teaching_guidelines table

State transitions are enforced at the database and API level to ensure workflow integrity.

### 4.3 Metadata Management
- Each uploaded book will include metadata such as:
  - Book title, author, edition, and year.
  - Associated grade, subject, country, and education board.
  - Ordered sequence of pages and their OCR approval status.
  - Version and historical data.

### 4.4 Text Review & Approval

#### Page Upload Flow (One-at-a-Time for MVP)
The MVP implements a sequential, one-page-at-a-time workflow:

1. **Admin uploads a single page image** (PNG, JPG, JPEG, TIFF, WebP)
2. **System performs OCR** using OpenAI Vision API (latest model: gpt-4o or gpt-4o-mini)
3. **Side-by-side review UI displays:**
   - Original page image (left panel)
   - Extracted OCR text (right panel)
4. **Admin chooses:**
   - **Approve** → Page stored in S3, appears in approved pages sidebar, can upload next page
   - **Reject** → Admin can re-upload a better quality image (no inline editing in MVP)
5. **Repeat** until all pages are uploaded and approved
6. **Admin clicks "Mark Book Complete"** → Book status transitions to `pages_complete`

**Key Constraint for MVP:** Pages must be uploaded and reviewed sequentially. Batch upload is deferred to post-MVP.

#### OCR Technology
- **Provider:** OpenAI Vision API
- **Model:** Latest vision-capable model (gpt-4o recommended for accuracy)
- **Processing:** One page at a time
- **Retry Logic:** If OCR fails, admin re-uploads the image
- **Cost Optimization:** Deferred to post-MVP (prioritize accuracy over cost)

Once all pages are approved and the book is marked complete, it becomes ready for guideline generation.

### 4.5 Guideline Generation

#### Trigger Mechanism
- **Manual Trigger:** Admin clicks "Generate Guidelines" button when book status is `pages_complete`
- Book status transitions to `generating_guidelines`
- LangGraph workflow executes asynchronously

#### LangGraph Workflow
The guideline generation uses a **LangGraph state machine** with incremental, page-by-page processing while maintaining context:

**Proposed Graph Nodes:**
1. **extract_topics_node** - Identifies main topics/chapters from all pages
2. **extract_subtopics_node** - For each topic, extracts subtopics with incremental context from previous pages
3. **extract_learning_objectives_node** - Determines what students should learn for each subtopic
4. **identify_misconceptions_node** - Identifies common errors and confusion points
5. **extract_assessment_criteria_node** - Generates example problems and mastery rubrics
6. **synthesize_guideline_node** - Combines all extracted data into final guideline.json structure

**Key Design Principle:** **Incremental extraction with context**
- Process pages sequentially (page 1 → page 2 → page 3...)
- Pass previous page context to next page to detect:
  - Topic continuation vs. new topic
  - Chapter boundaries
  - Progressive concept building

#### Generated guideline.json Structure
Each guideline represents structured information derived from the book:

```json
{
  "book_id": "ncert_math_3_2024",
  "book_metadata": {
    "title": "Math Magic",
    "author": "NCERT",
    "board": "CBSE",
    "grade": 3,
    "subject": "Mathematics",
    "country": "India"
  },
  "topics": [
    {
      "topic": "Fractions",
      "subtopics": [
        {
          "subtopic": "Comparing Like Denominators",
          "guideline": "Step-by-step teaching instructions for this specific subtopic...",
          "metadata": {
            "learning_objectives": [
              "Compare fractions with like denominators",
              "Identify larger and smaller fractions"
            ],
            "depth_level": "basic",
            "prerequisites": [
              "Understanding numerator and denominator",
              "Concept of equal parts"
            ],
            "common_misconceptions": [
              "Students might compare only numerators and ignore denominators",
              "Confusion between fraction size and numerator size"
            ],
            "scaffolding_strategies": [
              "Use visual models like pie charts and fraction bars",
              "Start with concrete manipulatives before abstract notation"
            ],
            "assessment_criteria": {
              "mastery": "Can compare 3+ fractions accurately with explanation",
              "proficiency": "Can compare 2 fractions correctly",
              "developing": "Can identify numerator and denominator"
            }
          },
          "source_pages": [15, 16, 17]
        },
        {
          "subtopic": "Adding Like Denominators",
          "guideline": "...",
          "metadata": { ... },
          "source_pages": [18, 19, 20]
        }
      ]
    },
    {
      "topic": "Multiplication",
      "subtopics": [ ... ]
    }
  ]
}
```

#### Review and Approval
- The generated `guideline.json` is stored in S3: `s3://learnlikemagic-books/books/{book_id}/guideline.json`
- Book status transitions to `guidelines_pending_review`
- Admin reviews the guideline in the UI
- Admin can:
  - **Approve** → Auto-populate `teaching_guidelines` table (see Section 4.5.1)
  - **Reject & Retry** → Re-run LangGraph workflow (potentially with adjusted parameters)

#### 4.5.1 Integration with Teaching Guidelines Table
When admin approves a guideline.json:

**Automatic Population Logic:**
1. Parse guideline.json to extract all topics and subtopics
2. For each subtopic, create a new row in `teaching_guidelines` table:
   - `id`: Auto-generated unique identifier
   - `country`, `board`, `grade`, `subject`: From book metadata
   - `topic`: From guideline.json topic
   - `subtopic`: From guideline.json subtopic
   - `guideline`: The detailed teaching instructions
   - `metadata_json`: The metadata object (objectives, misconceptions, etc.)
   - `book_id`: Reference to source book
   - `source_pages`: JSON array of page numbers
3. Book status transitions to `approved`

**Example:** If guideline.json contains 3 topics with 2 subtopics each, the system creates **6 rows** in the teaching_guidelines table.

**MVP Constraint:** One book per subject. Since there's only one book for Grade 3 CBSE Mathematics, all generated guidelines automatically become active teaching references.

### 4.6 Aggregated (Merged) Guidelines

**Status: OUT OF SCOPE FOR MVP** - Deferred to post-MVP phase.

Future capability to combine multiple book-level guidelines into merged or composite guidelines at higher scopes, such as:
- Country + Board + Subject level
- Board + Grade + Subject level

Merged guidelines would consolidate information from multiple books, identifying overlapping or similar topics. Topic names and synonyms would be reconciled to build a standardized canonical structure.

**MVP Approach:** Since MVP assumes one book per subject, there is no need for merging logic. Each book's guidelines directly populate the `teaching_guidelines` table without conflicts.

### 4.7 Data Access & Lookup
- The system should support querying of guidelines based on combinations like:
  - Country + Board + Subject + Grade
  - Board + Subject + Topic
  - Grade + Subject + Subtopic
- Returned results should provide structured teaching guidelines, along with provenance (i.e., which books contributed).

### 4.8 Versioning & History
- Each book can have multiple versions, and each version can have its own guideline.
- Book versions include metadata such as creation date, edition number, and author.
- Version control ensures that historical data is preserved and comparisons can be made across versions.

### 4.9 Admin User Interface

#### Authentication
- **Route:** `/admin` in the existing `llm-frontend` React application
- **Credentials:** Hardcoded for MVP
  - Username: `admin`
  - Password: `admin`
- **Session:** Simple session-based auth using localStorage (no JWT/OAuth for MVP)

#### Admin UI Flow
1. **Login Page** (`/admin`)
   - Simple username/password form
   - On success, redirect to books dashboard

2. **Books Dashboard** (`/admin/books`)
   - List all books with status indicators
   - "Create New Book" button
   - Search/filter by grade, subject, board
   - Click book to view details

3. **Create Book** (`/admin/books/new`)
   - Form to enter:
     - Title, Author, Edition, Edition Year
     - Country, Board, Grade, Subject
     - Upload cover image
   - On submit: Extract metadata from cover (using Vision API), create book in `draft` status

4. **Book Detail Page** (`/admin/books/{book_id}`)
   - **Header:** Book metadata, current status
   - **Left Panel:** Page upload interface
     - Upload image button
     - Preview uploaded image
     - Display OCR text
     - Approve/Reject buttons
   - **Right Sidebar:** Approved pages list (ordered)
     - Click to view page image + text
   - **Actions:**
     - "Mark Book Complete" button (when ready for guidelines)
     - "Generate Guidelines" button (when status = `pages_complete`)
   - **Guidelines Panel:** (appears when status = `guidelines_pending_review`)
     - View generated guideline.json
     - Approve/Reject buttons

#### Key UX Principles
- **Sequential workflow:** Can't skip steps (upload → OCR → approve → next)
- **Visual feedback:** Status badges, loading indicators
- **Side-by-side comparison:** Image and text always visible together
- **Minimal clicks:** Approve/reject decisions are one click

### 4.10 Review Workflows
- OCR and guideline generation both have admin review workflows.
- States include: Draft → Uploading Pages → Pages Complete → Generating Guidelines → Guidelines Pending Review → Approved.
- Admins can see page images alongside OCR text and request regeneration by re-uploading images.
- A retry mechanism allows running the guideline generator again when guidelines are rejected.

### 4.11 Data Privacy & Copyright Compliance
- The system must **not** reproduce or distribute verbatim book content.
- Only summarized or inferred guidelines are used as outputs.
- Guidelines must represent **AI-synthesized interpretations** and **not copies** of the book text.
- All books processed must be publicly available or approved for internal educational use.

### 4.12 Quality Evaluation & Monitoring
- The system should track and measure key quality metrics such as:
  - OCR accuracy (percentage of pages approved without manual edits).
  - Guideline synthesis accuracy (admin-approved vs. auto-generated text).
  - Retrieval precision (accuracy of topic-based queries).
  - Average admin review turnaround time.
- A feedback loop should exist for continuous model and process improvement.

---

## 5. Technical Implementation Details

### 5.1 AWS Infrastructure
- **S3 Bucket:** `learnlikemagic-books` (shared across dev/staging/production environments)
- **Region:** `us-east-1`
- **Folder Structure:** `books/{book_id}/` for each book
- **Access Pattern:** Backend has direct S3 access via AWS SDK (boto3)
- **Authentication:** AWS credentials in `~/.aws/credentials` (automatically detected by boto3)
- **Required AWS Permissions:**
  - `s3:PutObject` - Upload images, text files, metadata
  - `s3:GetObject` - Read images, text files, guidelines
  - `s3:DeleteObject` - Delete books and associated files
  - `s3:ListBucket` - List book contents

### 5.2 Backend Architecture
- **Framework:** FastAPI (existing)
- **Image Upload:** Via backend API endpoints (not direct to S3)
- **Supported Image Formats:** PNG, JPG, JPEG, TIFF, WebP
- **File Size Limits:** To be determined based on OpenAI Vision API constraints
- **New Dependencies:**
  - `boto3` - AWS SDK for Python
  - `Pillow` - Image processing (validation, format conversion)

### 5.3 OpenAI Vision API Integration
- **Model:** `gpt-4o-mini` (vision-capable, cost-effective)
- **Max Tokens:** 4096 per request
- **Encoding:** Base64 image encoding
- **Usage:**
  - Book cover metadata extraction
  - Page OCR (comprehensive text extraction including drawings, formulas, captions)
- **Processing Mode:** Synchronous, one page at a time
- **Prompt Strategy:** Detailed interpretation prompt requesting all visual elements
- **Error Handling:** Retry on API failures, allow admin to re-upload on poor OCR quality
- **API Key:** From environment variable (OPENAI_API_KEY already configured)

### 5.4 Frontend Architecture
- **Framework:** React + TypeScript (existing `llm-frontend`)
- **New Routes:**
  - `/admin` - Login
  - `/admin/books` - Dashboard
  - `/admin/books/new` - Create book
  - `/admin/books/{id}` - Book detail
- **API Client:** Extend existing `api.ts` with admin endpoints
- **State Management:** React hooks (useState, useEffect) - no Redux needed for MVP
- **File Upload:** HTML5 File API with preview

### 5.5 Database Migrations
- **Migration Tool:** Alembic (recommended) or manual SQL scripts
- **New Tables:** `books`, `book_guidelines`
- **Modified Tables:** `teaching_guidelines` (add `book_id`, `source_pages` columns)
- **Migration Strategy:** Backward-compatible migrations to avoid downtime

---

## 6. Key Open Challenges

1. **Topic Synonyms and Mapping** (Deferred to Post-MVP)
   Different textbooks may use slightly different names for the same concept (e.g., "Fractions" vs. "Parts of a Whole").
   → Need a canonical topic ontology or automated synonym resolver.

2. **Guideline Merging Logic** (Deferred to Post-MVP)
   Defining the right merging strategy for overlapping or conflicting topic representations.

3. **Quality Assurance for AI Outputs**
   Ensuring the generated guidelines are pedagogically sound, age-appropriate, and aligned with educational goals.

4. **Continuous Version Alignment**
   Managing drift when boards or publishers release updated editions.

5. **Evaluation System**
   Defining robust evaluation metrics and feedback loops to measure OCR and guideline quality over time.

---

## 7. MVP Scope & Constraints

The MVP will focus on a **single subject and grade** to validate the process end-to-end.

**MVP Scope:**
- **Board:** CBSE
- **Country:** India
- **Grade:** 3
- **Subject:** Mathematics
- **Sample Book:** "Math Magic (NCERT)"

**MVP Constraints:**
1. **One book per subject** - No need for guideline merging logic
2. **Sequential page upload** - One page at a time (no batch upload)
3. **Re-upload only for rejections** - No inline OCR text editing
4. **Hardcoded admin credentials** - Simple auth (admin/admin)
5. **Manual guideline trigger** - Admin clicks button to generate
6. **No topic synonym resolution** - Accept topics as extracted by AI

**MVP Deliverables:**
1. Admin UI built into existing `llm-frontend` (`/admin` routes)
2. Book creation and management
3. Page upload with OCR (OpenAI Vision API)
4. Side-by-side image/text review interface
5. Approved pages sidebar viewer
6. LangGraph-based guideline generation workflow
7. Guideline review and approval interface
8. Automatic population of `teaching_guidelines` table
9. Integration with existing AI Tutor (tutor uses new guidelines immediately)
10. AWS S3 integration for storage

**Out of Scope for MVP:**
- Batch page upload
- Inline OCR text editing
- Multi-book guideline merging
- Topic synonym resolution
- Advanced admin permissions/roles
- Guideline versioning UI (data model supports it, UI doesn't)
- Analytics dashboard for OCR/guideline quality

---

## 8. Future Enhancements

1. **Batch Page Upload**
   - Upload multiple pages at once, review individually

2. **Inline OCR Editing**
   - Allow admin to edit OCR text directly in the UI before approval

3. **Guideline Merging Enhancements**
   - Enhance logic for merging guidelines from multiple books to form unified curriculum references

4. **Topic Synonym Resolution**
   - Build and maintain a canonical topic dictionary to automatically map equivalent terms across different books and boards

5. **Advanced Admin Features**
   - Role-based access control (admin, reviewer, super-admin)
   - Audit logs for all admin actions
   - Collaborative review workflows

6. **Quality Analytics Dashboard**
   - OCR accuracy trends
   - Guideline generation success rates
   - Admin review turnaround times

---

*Document last updated: 2025-10-25*
*Updated with technical implementation details and MVP clarifications*
